#+title: Emacs configuration
#+author: Witoslaw Koczewski
#+email: wi@koczewski.de
#+language: en
#+options: ':t toc:nil num:t author:t email:t
#+startup: content indent

* Templates

https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-emacs.org

* The early initialisation of Emacs (=early-init.el=)

This is the first file that Emacs reads when starting up. It should
contain code that does not depend on any package or the proportions of
the Emacs frame. In general, this early initialisation file is meant
to set up a few basic things before Emacs produces the initial frame
by delegating to the =init.el=.

** File header
#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
;;; early-init.el --- Tangeled from emacs-config.org  -*- lexical-binding: t; -*-
#+end_src

** Tweaks for performance

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
  ;;; Tweaks for performance

  (setq load-prefer-newer t)
  (setq native-comp-speed 2)
  (setq read-process-output-max (* 1024 1024))
  (setq max-lisp-eval-depth 16000)
  (setq max-specpdl-size 25000)

  ;; Temporarily increase the garbage collection threshold.
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.5)

  (defvar my/--file-name-handler-alist file-name-handler-alist)
  (defvar my/--vc-handled-backends vc-handled-backends)

  (setq file-name-handler-alist nil
        vc-handled-backends nil)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold (* 50 1024 1024) ;; 50MB
                    gc-cons-percentage 0.1
                    file-name-handler-alist my/--file-name-handler-alist
                    vc-handled-backends my/--vc-handled-backends)))
#+end_src

** Elpaca (disabled)

Elpaca requires to disable =package.el=.
https://github.com/progfolio/elpaca/blob/master/doc/manual.md#installation-requirements

#+begin_src emacs-lisp :NOtangle "stows/emacs/.config/emacs/early-init.el"
  ;;; Elpaca
  (setq package-enable-at-startup nil)
#+end_src

** Package

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
  ;;; package

  (require 'package)
  (setq package-enable-at-startup t)
  (add-to-list 'package-archives '("stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

#+end_src

** Frames

Disable menu, toolbars and scrollbars.

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
;;; Frames

(menu-bar-mode -1)
(scroll-bar-mode -1)
(add-hook 'emacs-startup-hook
          (lambda ()
            (tool-bar-mode -1)))
#+end_src

These are some general settings for frames.

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
(setq frame-resize-pixelwise t
      frame-inhibit-implied-resize 'force
      frame-title-format '("%b")
      ring-bell-function 'ignore
      use-dialog-box t ; only for mouse events, which I seldom use
      use-file-dialog nil
      use-short-answers t
      inhibit-splash-screen t
      inhibit-startup-screen t
      inhibit-x-resources t
      inhibit-startup-echo-area-message user-login-name ; read the docstring
      inhibit-startup-buffer-menu t)
#+end_src

Open frames in fullscreen.
https://www.emacswiki.org/emacs/FullScreen

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
(push '(fullscreen . maximized) default-frame-alist)
#+end_src

** Theme

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/early-init.el"
;;; Theme
(load-theme 'modus-vivendi-tinted) 
#+end_src

* The main initialisation of Emacs (=init.el=)
** File header

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
;;; init.el --- Tangeled from emacs-config.org  -*- lexical-binding: t; -*-
#+end_src

** Emacs behavior
*** Elpaca (disabled)

https://github.com/progfolio/elpaca/blob/master/doc/manual.md

#+begin_src emacs-lisp :NOtangle "stows/emacs/.config/emacs/init.el"
  ;;; Elpaca

  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order
    '(elpaca :repo "https://github.com/progfolio/elpaca.git"
             :ref nil :depth 1 :inherit ignore
             :files (:defaults "elpaca-test.el" (:exclude "extensions"))
             :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop
                      (apply
                       #'call-process
                       `("git" nil ,buffer t "clone"
                         ,@(when-let* ((depth (plist-get order :depth)))
                             (list (format "--depth=%d" depth) "--no-single-branch"))
                         ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process
                             emacs nil buffer nil "-Q" "-L" "." "--batch"
                             "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil))
        (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  (elpaca elpaca-use-package
    (elpaca-use-package-mode))
#+end_src

*** Disable Emacs Custom Infrastructure

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

*** Disable backups and lockfiles


#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(setq make-backup-files nil)
(setq backup-inhibited nil)
(setq create-lockfiles nil)
#+end_src

*** Silence native compilation

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(when (native-comp-available-p)
  (setq native-comp-async-report-warnings-errors 'silent)
  (setq native-compile-prune-cache t))
#+end_src

*** Miscellaneous settings

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (use-package emacs
    :ensure nil
    :demand t

    :config

    (setq user-full-name "Witoslaw Koczewski")
    (setq user-mail-address "wi@koczewski.de")

  ;;; Buffers

    ;; Revert Dired and other buffers
    (setq global-auto-revert-non-file-buffers t)

    ;; Revert buffers when the underlying file has changed
    (global-auto-revert-mode 1)

    ;; pop up dedicated buffers in a different window.
    (setq switch-to-buffer-in-dedicated-window 'pop)
    ;; treat manual buffer switching (C-x b for example) the same as
    ;; programmatic buffer switching.
    (setq switch-to-buffer-obey-display-actions t)

    ;; prefer the more full-featured built-in ibuffer for managing
    ;; buffers.
    (keymap-global-set "<remap> <list-buffers>" #'ibuffer-list-buffers)
    ;; turn off forward and backward movement cycling
    (setq ibuffer-movement-cycle nil)
    ;; the number of hours before a buffer is considered "old" by
    ;; ibuffer.
    (setq ibuffer-old-time 24)

    (setq undo-limit 1600000)

    (setq truncate-string-ellipsis "â€¦")

    (setq-default truncate-lines nil)
    (setq truncate-lines nil)

    ;; (global-display-fill-column-indicator-mode t)

    (customize-set-variable 'fill-column 80)

    (setq recenter-positions '(5 top bottom))

    (setq global-visual-line-mode t)


  ;;; Completion settings

    (setq tab-always-indent 'complete)
    (setq completion-cycle-threshold 3)
    (setq completion-category-overrides
          '((file (styles . (partial-completion)))))
    (setq completions-detailed t)


  ;;; Editing

    ;; Typed text replaces the selection if the selection is active,
    ;; pressing delete or backspace deletes the selection.
    (delete-selection-mode)

    ;; Use spaces instead of tabs
    (setq-default indent-tabs-mode nil)

    ;; (setq-default tab-width 2)

    ;; Do not save duplicates in kill-ring
    (setq kill-do-not-save-duplicates t)

    ;; Better support for files with long lines
    (setq-default bidi-paragraph-direction 'left-to-right)
    (setq-default bidi-inhibit-bpa t)
    (global-so-long-mode 1)

    (setq sentence-end-double-space nil)

    (setq next-line-add-newlines nil)


  ;;; Persistence between sessions


    ;; Enable savehist-mode for command history
    (savehist-mode 1)

    ;; save the bookmarks file every time a bookmark is made or deleted
    ;; rather than waiting for Emacs to be killed.  Useful especially when
    ;; Emacs is a long running process.
    (setq bookmark-save-flag 1)


  ;;; Window management

    (winner-mode 1)

    ;; (define-prefix-command 'crafted-windows-key-map)

    ;; (keymap-set 'crafted-windows-key-map "u" 'winner-undo)
    ;; (keymap-set 'crafted-windows-key-map "r" 'winner-redo)
    ;; (keymap-set 'crafted-windows-key-map "n" 'windmove-down)
    ;; (keymap-set 'crafted-windows-key-map "p" 'windmove-up)
    ;; (keymap-set 'crafted-windows-key-map "b" 'windmove-left)
    ;; (keymap-set 'crafted-windows-key-map "f" 'windmove-right)

    ;; (keymap-global-set crafted-windows-prefix-key 'crafted-windows-key-map)

    ;; Make scrolling less stuttered
    (setq auto-window-vscroll nil)
    (setq fast-but-imprecise-scrolling t)
    (setq scroll-conservatively 101)
    (setq scroll-margin 10)
    (setq scroll-preserve-screen-position t)

    ;; open man pages in their own window, and switch to that window to
    ;; facilitate reading and closing the man page.
    (setq Man-notify-method 'aggressive)

    ;; keep the Ediff control panel in the same frame
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)

    ;; Window configuration for special windows.
    (add-to-list 'display-buffer-alist
                 '("\\*Help\\*"
                   (display-buffer-reuse-window display-buffer-pop-up-window)))

    (add-to-list 'display-buffer-alist
                 '("\\*Completions\\*"
                   (display-buffer-reuse-window display-buffer-pop-up-window)
                   (inhibit-same-window . t)
                   (window-height . 10)))


  ;;; Dired

    ;; Make dired do something intelligent when two directories are shown
    ;; in separate dired buffers.
    (setq dired-dwim-target t)

    ;; automatically update dired buffers on revisiting their directory
    (setq dired-auto-revert-buffer t)


  ;;; Eshell

    ;; scroll eshell buffer to the bottom on input, but only in "this"
    ;; window.
    (setq eshell-scroll-to-bottom-on-input 'this)


  ;;; Miscellaneous

    ;; Load source (.el) or the compiled (.elc or .eln) file whichever is
    ;; newest
    (setq load-prefer-newer t)

    ;; Make shebang (#!) file executable when saved
    (add-hook 'after-save-hook
              #'executable-make-buffer-file-executable-if-script-p)

    ;; Turn on repeat mode to allow certain keys to repeat on the last
    ;; keystroke. For example, C-x [ to page backward, after pressing this
    ;; keystroke once, pressing repeated [ keys will continue paging
    ;; backward. `repeat-mode' is exited with the normal C-g, by movement
    ;; keys, typing, or pressing ESC three times.
    (unless (version< emacs-version "28")
      (repeat-mode 1))

    (setq ad-redefinition-action 'accept)

    (setq cursor-in-non-selected-windows nil)

    (setq x-stretch-cursor t)


    (setq help-window-select t)

    (setq initial-scratch-message "")

    (setq-default enable-local-variables t)

    (setq confirm-kill-emacs nil)

    (defalias 'yes-or-no-p 'y-or-n-p)

    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  ;;; ** automatic saving and backups

    (let ((my/auto-save-directory (expand-file-name "auto-save/" user-emacs-directory)))
      (setq backup-directory-alist
            `((".*" . ,my/auto-save-directory)))
      (setq auto-save-file-name-transforms
            `((".*" ,my/auto-save-directory t))))

    ;; Activate auto saving in every buffer
    (setq auto-save-default t)

    (save-place-mode 1)

    (setq create-lockfiles nil)

    (setq delete-by-moving-to-trash t)

  ;;; navigation

    ;; just use identifier at point
    (setq xref-prompt-for-identifier nil)

    (setq xref-auto-jump-to-first-xref 'show)

  ;;; files and directories

    (setq vc-follow-symlinks t)

    (customize-set-variable 'project-vc-merge-submodules t)

  ;;; external tools

    ;; (setq browse-url-browser-function 'browse-url-firefox)
    (setq browse-url-browser-function 'browse-url-chrome)
    
  )

#+end_src

** My Helper functions and macros
*** =witek-context-key-map=

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(defvar witek-context-key-map (make-sparse-keymap) "My Context Keymap")
(defalias 'witek-context-key-map witek-context-key-map)

(defun my/set-context-key (kbd-string command-symbol)
  (define-key witek-context-key-map (kbd kbd-string) command-symbol))

(defun my/activate-context-key-map ()
  "Set `witek-context-key-map' as the current transient map. Also show which-key."
  (interactive)
  (set-transient-map witek-context-key-map))
#+end_src

*** my/set-custom-key

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(defun my/set-custom-key (kbd-string command-symbol)
  (global-set-key (kbd (concat "C-c " kbd-string)) command-symbol))
#+end_src

*** comment macro

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(defmacro comment (&rest body)
  "Determine what to do with BODY.

If BODY contains an unquoted plist of the form (:eval t) then
return BODY inside a `progn'.

Otherwise, do nothing with BODY and return nil, with no side
effects."
  (declare (indent defun))
  (let ((eval))
    (dolist (element body)
      (when-let* (((plistp element))
                  (key (car element))
                  ((eq key :eval))
                  (val (cadr element)))
        (setq eval val
              body (delq element body))))
    (when eval `(progn ,@body))))
#+end_src

*** my/backspace-dwim

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (defun my/backspace-dwim ()
    (interactive)
    (if (use-region-p)
        (call-interactively 'sp-delete-region)
      (sp-backward-delete-char))
    )
#+end_src

*** wrap-round wrap-square wrap-curly

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
    
  (defun my/wrap-round ()
    (interactive)
    (sp-wrap-round)
    (insert " ")
    (backward-char)
    (meow-insert))
  (define-key witek-context-key-map (kbd "(") 'my/wrap-round)

  (defun my/wrap-square ()
    (interactive)
    (sp-wrap-square))
  (define-key witek-context-key-map (kbd "[") 'my/wrap-square)

  (defun my/wrap-curly ()
    (interactive)
    (sp-wrap-curly))
  (define-key witek-context-key-map (kbd "{") 'my/wrap-curly)

#+end_src

** Theme
*** default font

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-12"))
#+end_src

*** ef-themes

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(use-package ef-themes
  :ensure t

  :config
  (setq ef-themes-to-toggle '(ef-eagle ef-owl))
  (setq ef-themes-headings
        '((0 variable-pitch light 1.9)
          ;; (1 variable-pitch light 1.8)
          ;; (2 variable-pitch regular 1.7)
          ;; (3 variable-pitch regular 1.6)
          ;; (4 variable-pitch regular 1.5)
          ;; (5 variable-pitch 1.4)
          ;; (6 variable-pitch 1.3)
          ;; (7 variable-pitch 1.2)
          ;; (t variable-pitch 1.1)
          ))
  (setq ef-themes-mixed-fonts t
        ef-themes-variable-pitch-ui t)
  (setq ef-themes-region '(intense no-extend neutral))
  (mapc #'disable-theme custom-enabled-themes)

  (ef-themes-select 'ef-owl)

  )
#+end_src

*** spacious-padding

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(use-package spacious-padding
  :ensure t
  :config
  (setq spacious-padding-widths
        '( :internal-border-width 15
           :header-line-width 4
           :mode-line-width 6
           :tab-width 4
           :right-divider-width 30
           :scroll-bar-width 8
           :fringe-width 8))
  (spacious-padding-mode 1)
  )
#+end_src

*** pulsar

https://protesilaos.com/emacs/pulsar#h:96289426-8480-4ea6-9053-280348adc0ed

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(use-package pulsar
  :ensure t

  :config
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.10)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-cyan)
  (setq pulsar-highlight-face 'pulsar-yellow)
  
  (setq pulsar-resolve-pulse-function-aliases t)

  (add-to-list 'pulsar-pulse-functions 'meow-search)
  (add-to-list 'pulsar-pulse-functions 'phi-search)
  (add-to-list 'pulsar-pulse-functions 'phi-search-backward)
  (add-to-list 'pulsar-pulse-functions 'beginning-of-defun)
  (add-to-list 'pulsar-pulse-functions 'end-of-defun)

  (add-to-list 'pulsar-pulse-region-functions 'yank)
  (add-to-list 'pulsar-pulse-region-functions 'consult-yank-pop)  
  
  (pulsar-global-mode 1)
  (add-hook 'minibuffer-setup-hook #'pulsar-pulse-line)

  ;; integration with the `consult' package:
  (add-hook 'consult-after-jump-hook #'pulsar-recenter-top)
  (add-hook 'consult-after-jump-hook #'pulsar-reveal-entry)

  )
#+end_src

*** ligature

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(use-package ligature
  :ensure t
  :load-path "path-to-ligature-repo"
  
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia and Fira Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode
                          '(;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~
                            ;; =:= =!=
                            ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                            ;; ;; ;;;
                            (";" (rx (+ ";")))
                            ;; && &&&
                            ("&" (rx (+ "&")))
                            ;; !! !!! !. !: !!. != !== !~
                            ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                            ;; ?? ??? ?:  ?=  ?.
                            ("?" (rx (or ":" "=" "\." (+ "?"))))
                            ;; %% %%%
                            ("%" (rx (+ "%")))
                            ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
                            ;; |->>-||-<<-| |- |== ||=||
                            ;; |==>>==<<==<=>==//==/=!==:===>
                            ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                            "-" "=" ))))
                            ;; \\ \\\ \/
                            ("\\" (rx (or "/" (+ "\\"))))
                            ;; ++ +++ ++++ +>
                            ("+" (rx (or ">" (+ "+"))))
                            ;; :: ::: :::: :> :< := :// ::=
                            ;; (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                            ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
                            ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                            "="))))
                            ;; .. ... .... .= .- .? ..= ..<
                            ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                            ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
                            ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                            ;; *> */ *)  ** *** ****
                            ("*" (rx (or ">" "/" ")" (+ "*"))))
                            ;; www wwww
                            ("w" (rx (+ "w")))
                            ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
                            ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
                            ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=>
                            ;; << <<< <<<<
                            ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                            "-"  "/" "|" "="))))
                            ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>>
                            ;; >> >>> >>>>
                            (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                            ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
                            ;; ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                            ;; (+ "#"))))
                            ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
                            ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                            ;; __ ___ ____ _|_ __|____|_
                            ("_" (rx (+ (or "_" "|"))))
                            ;; Fira code: 0xFF 0x12
                            ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                            ;; Fira code:
                            ;; "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                            ;; The few not covered by the regexps.
                            ;; "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="
                            ))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

** Keys
*** meow

https://github.com/meow-edit/meow

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"

  (use-package meow
    :ensure t

    :config

    (my/set-custom-key "x" ctl-x-map)

    (my/set-custom-key "<SPC>" 'execute-extended-command)
    (my/set-custom-key ":" 'eval-expression)
    
    (defun my/meow-setup-keys ()
      (meow-motion-overwrite-define-key
       '("j" . meow-next)
       '("k" . meow-prev)
       ;; '("<escape>" . ignore)

       )

      (meow-leader-define-key
       ;; SPC j/k will run the original command in MOTION state.
       '("<SPC>" . execute-extended-command)
       '("j" . "H-j")
       '("k" . "H-k")
       ;; Use SPC (0-9) for digit arguments.
       '("1" . meow-digit-argument)
       '("2" . meow-digit-argument)
       '("3" . meow-digit-argument)
       '("4" . meow-digit-argument)
       '("5" . meow-digit-argument)
       '("6" . meow-digit-argument)
       '("7" . meow-digit-argument)
       '("8" . meow-digit-argument)
       '("9" . meow-digit-argument)
       '("0" . meow-digit-argument)
       '("/" . meow-keypad-describe-key)
       '("?" . meow-cheatsheet)
       )

      (meow-normal-define-key

       ;; Movement
       '("h" . meow-left)
       '("l" . meow-right)
       '("j" . meow-next)
       '("k" . meow-prev)

       ;; Movement + Navigation
       '(")" . my/after-end-of-sexp)
       '("(" . my/before-beginning-of-sexp)
       '("K" . sp-beginning-of-previous-sexp)
       '("J" . sp-beginning-of-next-sexp)
       '("L" . meow-next-symbol)
       '("H" . meow-back-symbol)
       '("E" . meow-next-word)
       ;; '("B" . meow-back-word)
       '("e" . meow-end-of-thing)
       '("%" . my/matching-paren)
       '("M-k" . beginning-of-defun)
       '("M-j" . end-of-defun)
       '("M-l" . forward-sexp)
       '("M-h" . backward-sexp)

       ;; Selection
       '("V" . meow-line)
       '("w" . witek-meow-mark-symbol)
       '("W" . witek-meow-mark-word)
       '("b" . meow-block)
       '("B" . meow-to-block)
       '("s" . meow-inner-of-thing)
       '("S" . meow-bounds-of-thing)
       '("F" . meow-find)
       '("t" . meow-till)
       '("[" . meow-beginning-of-thing)
       '("]" . meow-end-of-thing)
       '("v" . meow-right-expand)
       ;; '("H" . meow-left-expand)
       ;; '("J" . meow-next-expand)
       ;; '("K" . meow-prev-expand)

       '("<escape>" . meow-cancel-selection)

       ;; Editing
       '("i" . meow-insert)
       '("I" . meow-open-above)
       '("a" . meow-append)
       '("A" . meow-open-below)
       '("c" . meow-change)

       ;; Deleting
       '("d" . meow-kill)
       '("D" . meow-kill-whole-line)
       '("<deletechar>" . meow-delete)
       '("<del>". meow-backward-delete)
       '("C-<backspace>" . sp-raise-sexp)
       '("<backspace>" . my/backspace-dwim)
       '("x" . meow-delete)

       '("u" . meow-undo)
       '("U" . undo-redo)
       ;; '("C-r" . undo-redo)

       ;; Misc
       '("." . repeat)
       '("r" . meow-reverse)
       '("-" . negative-argument)
       '("/" . meow-visit)
       '("q" . meow-quit)
       ;; '("<escape>" . ignore)

       '("y" . meow-save)
       '("p" . yank)
       '("R" . meow-replace)
       '("P" . consult-yank-pop)

       '("G" . meow-grab)
       '("_" . meow-swap-grab)
       '("Y" . meow-sync-grab)

       '("n" . meow-search)

       '("=" . my/indent-region-or-defun)

       '(":" . consult-goto-line)

       '("0" . meow-expand-0)
       '("9" . meow-expand-9)
       '("8" . meow-expand-8)
       '("7" . meow-expand-7)
       '("6" . meow-expand-6)
       '("5" . meow-expand-5)
       '("4" . meow-expand-4)
       '("3" . meow-expand-3)
       '("2" . meow-expand-2)
       '("1" . meow-expand-1)

       ;; '("U" . meow-undo-in-selection)
       ;; '("s" . meow-line)
       '("z" . meow-pop-selection)

       ;; more...
       '(";" . comment-line)
       '("G" . end-of-buffer)
       '("0" . beginning-of-line-text)
       '("$" . end-of-line)

       '("Ã¶" . my/append-after-end-of-sexp)

       '("," . my/activate-context-key-map)

       '("M" . magit-status)

       '("#" . clojure-toggle-ignore)

       '("g g" . beginning-of-buffer)
       '("g r" . xref-find-references)
       '("g i" . consult-imenu)
       '("g o" . consult-outline)
       '("g b" . consult-bookmark)

       '("m" . consult-register-store)
       '("g m" . consult-register-load)
       '("g M" . consult-register)
       '("'" . consult-register-load)

       '("@" . other-window)

       '("," . witek-context-key-map)
       ;;
       )

      )
    
    (setq meow-cursor-type-normal '(bar . 4))

    ;; disable anoying hints when expanding
    ;; (setq meow-expand-hint-counts ())

    (setq meow-expand-hint-remove-delay 3)

    ;; (setq meow-char-thing-table ((?r . round)
    ;;                              (?s . square)
    ;;                              (?c . curly)
    ;;                              (?g . string)
    ;;                              (?e . symbol)
    ;;                              (?w . window)
    ;;                              (?b . buffer)
    ;;                              (?p . paragraph)
    ;;                              (?l . line)
    ;;                              (?d . defun)
    ;;                              (?. . sentence)) )

    ;; don't insert anything when undefided key is used
    (setq meow-keypad-self-insert-undefined nil)

    ;; quicker pupup
    (setq meow-keypad-describe-delay 0.1)

    (setq meow-use-clipboard t)

    (setq meow-use-cursor-position-hack t
          meow-use-enhanced-selection-effect nil)

    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (my/meow-setup-keys)
    (meow-setup-indicator)
    (meow-global-mode 1)

    (when (fboundp 'corfu-quit)
      (add-hook 'meow-insert-exit-hook 'corfu-quit))

    )

#+end_src

*** for basic emacs commands

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"

  (my/set-custom-key "b d" 'kill-current-buffer)
  (my/set-custom-key "b j" 'bookmark-jump)
  (my/set-custom-key "b J" 'bookmark-jump-other-frame)
    
  (my/set-custom-key "d K" 'describe-keymap)
  (my/set-custom-key "d m" 'describe-mode)

  (my/set-custom-key "e q" 'save-buffers-kill-terminal)
  (my/set-custom-key "e Q" 'save-buffers-kill-emacs)
  (my/set-custom-key "e e" 'eval-expression)
  (my/set-custom-key "e l" 'eval-last-sexp)
  (my/set-custom-key "e b" 'eval-buffer)
  (my/set-custom-key "e f" 'eval-defun)
  (my/set-custom-key "e r" 'restart-emacs)

  (my/set-custom-key "f S" 'save-buffer)
  (my/set-custom-key "f f" 'find-file)

  (my/set-custom-key "w w" 'other-window)
  (my/set-custom-key "w l" 'window-left)
  (my/set-custom-key "w r" 'window-right)
  (my/set-custom-key "w n" 'next-window-any-frame)
  (my/set-custom-key "w p" 'previous-window-any-frame)
  (my/set-custom-key "w /" 'split-window-horizontally)
  (my/set-custom-key "w -" 'split-window-vertically)
  (my/set-custom-key "w d" 'delete-window)
  (my/set-custom-key "w m" 'delete-other-windows)

  (my/set-custom-key "s q" 'query-replace)

#+end_src

** Miscellaneous
*** recentf

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (use-package recentf
    :ensure nil
    :hook (after-init . recentf-mode)

    :config
    (setq recentf-max-saved-items 100)
    (setq recentf-max-menu-items 25)
    (setq recentf-save-file-modes nil)
    (setq recentf-keep nil)
    (setq recentf-auto-cleanup nil)
    (setq recentf-initialize-file-name-history nil)
    (setq recentf-filename-handlers nil)
    (setq recentf-show-file-shortcuts-flag nil)
    (recentf-mode 1)
    )
#+end_src

*** outline

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (use-package outline
    
    :config

    (my/set-custom-key "o t" 'outline-toggle-children)
    (my/set-custom-key "o f" 'outline-hide-other)
    (my/set-custom-key "o a" 'outline-show-all)

    (add-hook 'emacs-lisp-mode-hook #'outline-minor-mode)
    (add-hook 'clojure-mode-hook #'outline-minor-mode)
    )
#+end_src


#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(use-package outline-minor-faces
  :ensure t
  :after outline

  :config
  (add-hook 'outline-minor-mode-hook
            #'outline-minor-faces-mode))
#+end_src
*** project

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (use-package project
    :demand t
    
    :config
    (my/set-custom-key "p p" 'project-switch-project)
    (my/set-custom-key "p f" 'project-find-file)

    )
#+end_src

*** AI
**** Commons

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(defun my/ai-prompt-file (filename)
  (expand-file-name (concat "/p/orga/ai/prompts/" filename) user-emacs-directory))
#+end_src

**** Gptel

https://github.com/karthink/gptel

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (defun my/ai-gptel-load-directive-from-markdown (file)
    "Load a gptel directive from a markdown FILE.
  Returns a cons of (name . directive) where name is derived from filename
  and directive is the content of the file."
    (condition-case err
        (let ((max-specpdl-size (* 10 max-specpdl-size)) ; Increase recursion limit
              (max-lisp-eval-depth (* 10 max-lisp-eval-depth))
              (large-file-warning-threshold nil) ; Disable large file warning
              (gc-cons-threshold (* 100 1024 1024))) ; 100MB for GC threshold
          (with-temp-buffer
            ;; Temporarily increase buffer size limit for this operation
            (let ((enable-local-variables nil)
                  (buffer-read-only nil)
                  (buffer-file-name nil)
                  (max-mini-window-height 0.5))
              (insert-file-contents file)
              (let* ((filename (file-name-nondirectory file))
                     (name (intern (car (split-string filename "\\.md"))))
                     (content (buffer-substring-no-properties
                               (point-min)
                               (point-max))))
                (cons name (string-trim content))))))
      (error
       (message "Error loading directive from %s: %s"
                file (error-message-string err))
       nil)))

  (defun my/ai-gptel-load-all-markdown-directives (directory)
    "Load all markdown files from DIRECTORY as gptel directives.
  Returns a list of cons cells (name . directive) for each .md file."
    (when (file-directory-p directory)
      (let ((markdown-files (directory-files directory t "\\.md$")))
        (delq nil
              (mapcar #'my/ai-gptel-load-directive-from-markdown markdown-files)))))

  (defun my/gptel-make-tools ()

    (gptel-make-tool
     :name "emacs_eval"
     :description "Evaluate Emacs Lisp Code inside the running Emacs"
     :function (lambda (code)
                 (read "(progn 1 2)")
                 (eval
                  (read
                   (concat "(progn " code ")"))))
     :args (list '(:name "elisp_code"
                         :type "string"
                         :description "The Emacs Lisp Code to evaluate"))
     :confirm t
     :include nil
     :category "emacs")

    (gptel-make-tool
     :name "fetch"
     :description "Fetch and read the contents of a URL"
     :function (lambda (url)
                 (with-current-buffer (url-retrieve-synchronously url)
                   (goto-char (point-min)) (forward-paragraph)
                   (let ((dom (libxml-parse-html-region (point) (point-max))))
                     (run-at-time 0 nil #'kill-buffer (current-buffer))
                     (with-temp-buffer
                       (shr-insert-document dom)
                       (buffer-substring-no-properties (point-min) (point-max))))))
     :args (list '(:name "url"
                         :type "string"
                         :description "The URL to read"))
     :category "web")

    ;; (gptel-make-tool
    ;;  :function
    ;;  (lambda ()
    ;;    (if-let* ((proj (project-current))
    ;;              (root (project-root proj)))
    ;;        (let ((root-path (expand-file-name root)))
    ;;          (format "Project root directory: %s\nDirectory exists: %s\nIs directory: %s"
    ;;                  root-path
    ;;                  (file-exists-p root-path)
    ;;                  (file-directory-p root-path)))
    ;;      "No project found in the current context."))
    ;;  :name "get_project_root"
    ;;  :description "Get the root directory of the current project. This is useful for understanding the project structure and performing operations relative to the project root."
    ;;  :args nil
    ;;  :category "project")

    (gptel-make-tool
     :name "read_file"
     :description "Read and display the contents of a file"
     :function (lambda (filepath)
  	       (with-temp-buffer
  	         (insert-file-contents (expand-file-name filepath))
  	         (buffer-string)))
     :args (list '(:name "filepath"
  	               :type "string"
  	               :description "Path to the file to read.  Supports relative paths and ~."))
     :category "filesystem")

    (gptel-make-tool
     :name "list_project_files"
     :description "List programming files in the current project directory. Use this function to understand which files you want to read so you can better understand the request from the user."
     :function
     (lambda (&optional file-regex)
       (if-let* ((proj (project-current))
                 (root (project-root proj))
                 (default-regex "\\.\\(el\\|clj\\|cljs\\|cljc\\|js\\|jsx\\|ts\\|tsx\\|rb\\|py\\|go\\|rs\\|cpp\\|c\\|h\\|hpp\\|java\\|php\\)$")
                 (regex (or file-regex default-regex))
                 (files (project-files proj)))
           (let ((matching-files
                  (cl-remove-if-not
                   (lambda (file)
                     (string-match-p regex (file-relative-name file root)))
                   files)))
             (concat "Project root: " (abbreviate-file-name root) "\n"
                     "Files:\n"
                     (mapconcat
                      (lambda (file)
                        (concat "- " (file-relative-name file root)))
                      matching-files
                      "\n")))
         "No project found or no matching files."))
     :args (list '(:name "file_regex"
                         :type "string"
                         :description "Optional regex pattern to filter files (e.g., \"\\.py$\" for Python files). If not provided, lists common programming files."))
     :category "project")
    
    )


  (use-package gptel
    :ensure t
    :defer t
          
    :config
          
    (setq gptel-model `deepseek-chat)
    (setq gptel-temperature 0.7)
    (setq gptel-window-select t)
    (setq gptel-window-side 'right)
    (setq gptel-window-width 80)

    (setq gptel-default-mode 'org-mode)
    (setq gptel-org-branching-context nil)
    (setf (alist-get 'org-mode gptel-prompt-prefix-alist) "# user: ")
    (setf (alist-get 'org-mode gptel-response-prefix-alist) "# llm:\n\n")

    (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
    (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
          
    (setq gptel-api-key (auth-source-pass-get 'secret "openai-emacs"))
          
    (setq gptel-backend
          (gptel-make-anthropic "Claude"
            :stream t
            :key (auth-source-pass-get 'secret "anthropic-emacs")))
    ;; (setq gptel-model `claude-3-haiku-20240307)

    (setq gptel-backend
          (gptel-make-openai "DeepSeek"
            :host "api.deepseek.com"
            :endpoint "/chat/completions"
            :stream t
            :key (auth-source-pass-get 'secret "deepseek-emacs")
            :models '(deepseek-chat deepseek-coder)))
          
    (setq gptel-directives
          (let ((markdown-directives (my/ai-gptel-load-all-markdown-directives (expand-file-name "prompts" user-emacs-directory))))
            `(
              ,@markdown-directives
              )))

    ;; my/gptel-menu command
    (defun my/gptel-menu ()
      (interactive)
      (meow-insert-exit)
      (gptel-menu)
      )

    ;; my/gptel-scratch command
    (setq my/gptel-scratch-buffer-name "*gptel-scratch*")
    (defun my/ai-chat ()
      (interactive)
      (let ((buffer-name (concat
                          "*gptel-chat "
                          (format-time-string "%Y-%m-%d %H:%M:%S")
                          "*")))
        (progn
          (gptel buffer-name)
          (switch-to-buffer buffer-name)
          )
        )
      ;; (if (not (get-buffer my/gptel-scratch-buffer-name))
      ;;     (gptel my/gptel-scratch-buffer-name))
      ;; (switch-to-buffer my/gptel-scratch-buffer-name)
      )

    (defun my/ai-emacs-do ()
      "Execute the users request in emacs"
      (interactive)

      ;; tool
      (let ((emacs-eval-tool
             (gptel-make-tool
              :name "emacs_eval"
              :function (lambda (code)
                          (condition-case err
                              (let ((result (eval (read code))))
                                (format "Evaluation result: %S" result))
                            (error (format "Error: %s" (error-message-string err)))))
              :description "Evaluate Emacs Lisp code and return the result"
              :args '((:name "code"
                             :type "string"
                             :description "Emacs Lisp code to evaluate")))))
                
        ;; Add tool to gptel-tools and enable tool use
        (setq-local gptel-tools (list emacs-eval-tool))
        (setq-local gptel-use-tools t)
        )

      ;; system prompt
      (setq-local gptel--system-message "You are a helpful assistant living inside Emacs.
          Use the emacs_eval tool to fullfill the request of the user.")
            
      ;; user prompt and execution
      ;; (let ((prompt (gptel--read-minibuffer-prompt)))
      ;;   (call-interactively #'gptel-menu))

      (gptel--suffix-send '("m" "e"))
      )
          
    (my/gptel-make-tools)
           
    :bind
    ("M-<return>" . my/gptel-menu)
    ("C-c a i c" . my/ai-chat)
    ("C-c a i d" . my/ai-emacs-do)
          
    )
#+end_src

**** Elysium

https://github.com/lanceberge/elysium

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
(use-package elysium
  :ensure t
  :defer t
  )
#+end_src

**** Aidermacs

https://github.com/MatthewZMD/aidermacs

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (use-package aidermacs
    :ensure t
    :defer t
    ;; :bind (("C-c a" . aidermacs-transient-menu))
    
    :init
    (setq aidermacs-use-architect-mode t)
    (setq aidermacs-default-model "deepseek-coder"))
#+end_src

**** Efrit (disabled)

#+begin_src emacs-lisp :NO-tangle "stows/emacs/.config/emacs/init.el"
  ;;; efrit

  (add-to-list 'load-path "/p/efrit/lisp")

  (use-package efrit
    ;; :ensure t
    :init
    (setq efrit-data-directory "~/.config/emacs/efrit")

    (defun efrit-common-get-api-key ()
      "Get the Anthropic API key from pass."
      (auth-source-pass-get 'secret "anthropic-emacs"))
    
    )

#+end_src

** Legacy config

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"


(let ((custom-modules (expand-file-name "custom-modules" user-emacs-directory)))
  (when (file-directory-p custom-modules)
    (message "adding custom-modules to load-path: %s" custom-modules)
    (add-to-list 'load-path custom-modules)))

(require 'my-commands)
(require 'my-basics)
(require 'my-extras)
(require 'my-org)
(require 'my-lsp)
;; (require 'my-eglot)
;; (require 'my-email)
#+end_src
** Open =emacs-config.org= on startup

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"
  (add-hook 'after-init-hook
            (lambda ()
              (find-file "~/.dotfiles/emacs-config.org")))
#+end_src

** TEMPLATE

#+begin_src emacs-lisp :tangle "stows/emacs/.config/emacs/init.el"

#+end_src


