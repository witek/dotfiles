#+TITLE: DOOM Emacs Configuration
#+PROPERTY: header-args :tangle config.el

* Meta

Documentation: https://github.com/hlissner/doom-emacs/blob/develop/modules/config/literate/README.org
Inspired by https://raw.githubusercontent.com/daviwil/dotfiles/master/Emacs.org
Examples:
- https://github.com/hlissner/doom-emacs-private/blob/master/config.el
- https://tecosaur.github.io/emacs-config/config.html

Tangle with command 'org-babel-tangle'

** TODO Update Table of Contents in this file
** TODO Autosave on eval
** TODO out-org
** TODO padding/margin

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
:END:
* General Configuration

** Doom

#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;;           DO NOT MODIFY!
;;       tangeled from config.org

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Witoslaw Koczewski"
      user-mail-address "wi@koczewski.de")

(setq doom-localleader-key ",")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))


;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+END_SRC

** Auto-customizations

By default changes made via a customisation interface are added to init.el.
I prefer the idea of using a separate file for this. We just need to change a
setting, and load it if it exists.

#+BEGIN_SRC elisp

(print "[config.org] Auto-customizations")

(setq-default custom-file (expand-file-name "custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))

 #+END_SRC

** Better Defaults

#+BEGIN_SRC elisp

(setq-default
 ;; ad-redefinition-action 'accept         ; Silence warnings for redefinition
 auto-save-list-file-prefix nil         ; Prevent tracking for auto-saves
 cursor-in-non-selected-windows nil     ; Hide the cursor in inactive windows
 cursor-type '(hbar . 2)                ; Underline-shaped cursor
 custom-unlispify-menu-entries nil      ; Prefer kebab-case for titles
 custom-unlispify-tag-names nil         ; Prefer kebab-case for symbols
 delete-by-moving-to-trash t            ; Delete files to trash
 fill-column 80                         ; Set width for automatic line breaks
 gc-cons-threshold (* 8 1024 1024)      ; We're not using Game Boys anymore
 help-window-select t                   ; Focus new help windows when opened
 indent-tabs-mode nil                   ; Stop using tabs to indent
 inhibit-startup-screen t               ; Disable start-up screen
 initial-scratch-message ""             ; Empty the initial *scratch* buffer
 mouse-yank-at-point t                  ; Yank at point rather than pointer
 read-process-output-max (* 1024 1024)  ; Increase read size per process
 recenter-positions '(5 top bottom)     ; Set re-centering positions
 scroll-conservatively 101              ; Avoid recentering when scrolling far
 scroll-margin 35                       ; Add a margin when scrolling vertically
 select-enable-clipboard t              ; Merge system's and Emacs' clipboard
 scroll-preserve-screen-position 't
 sentence-end-double-space nil          ; Use a single space after dots
 ;; show-help-function nil                 ; Disable help text everywhere
 tab-always-indent 'complete            ; Tab indents first then tries completions
 tab-width 2                            ; Smaller width for tab characters
 uniquify-buffer-name-style 'forward    ; Uniquify buffer names
 ;; warning-minimum-level :error           ; Skip warning buffers
 window-combination-resize t            ; Resize windows proportionally
 x-stretch-cursor t                    ; Stretch cursor to the glyph width
 )

(setq
 undo-limit 80000000  ; Raise undo-limit to 80Mb
 ;; evil-want-fine-undo t ; By default while in insert all changes are one big blob. Be more granular
 auto-save-default t ; Nobody likes to loose work, I certainly don't
 truncate-string-ellipsis "…" ; Unicode ellispis are nicer than "...", and also save /precious/ space
 password-cache-expiry nil ; I can trust my computers ... can't I?
 ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
 )

;; (blink-cursor-mode 0)                   ; Prefer a still cursor
(delete-selection-mode 1)               ; Replace region when inserting text
(fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
(global-subword-mode 1)                 ; Iterate through CamelCase words
(mouse-avoidance-mode 'exile)           ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)    ; Enable downcase-region
(put 'upcase-region 'disabled nil)      ; Enable upcase-region
(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
(global-display-fill-column-indicator-mode t)

;; Change a few indenting behaviors.
(put 'add-function 'lisp-indent-function 2)
(put 'advice-add 'lisp-indent-function 2)
(put 'plist-put 'lisp-indent-function 2)

#+END_SRC

Allow configuration via .dir-locals.el

#+BEGIN_SRC elisp

(setq-default enable-local-variables t)

#+END_SRC

** Line Numbers

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC elisp

(setq display-line-numbers-type nil)

#+END_SRC

** Theme and Fonts

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:

Ligatures Test: ->

#+BEGIN_SRC elisp

(setq doom-theme 'doom-one)
;; (setq doom-theme 'modus-operandi)
;; (setq doom-theme 'modus-vivendi)
;; (setq doom-theme 'doom-one-light)
;; (setq doom-theme 'doom-vibrant)
;; (setq doom-theme 'doom-gruvbox)
;; (setq doom-theme 'doom-dracula)

(print (> (x-display-pixel-height) 1600))

;; TEST:// (-> what?)

(cond

 ((> (x-display-pixel-height) 1600)
  (setq

   doom-font (font-spec :family "Fira Code" :size 28 :weight 'light)
   doom-big-font (font-spec :family "JetBrains Mono" :size 36)
   doom-variable-pitch-font (font-spec :family "Ubuntu" :size 30)
   doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
   ))

 (t
  (setq
   doom-font (font-spec :family "Fira Code" :size 14 :weight 'light)
   doom-big-font (font-spec :family "JetBrains Mono" :size 18)
   doom-variable-pitch-font (font-spec :family "Ubuntu" :size 15)
   doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
   )))
#+END_SRC

** Exit without Confirmation

#+BEGIN_SRC elisp

(setq confirm-kill-emacs nil)

#+END_SRC

** Layout

From https://github.com/rougier/nano-emacs/blob/master/nano-layout.el

#+BEGIN_SRC elisp

;; (setq default-frame-alist
;;       (append (list
;; 	           '(min-height . 1)
;;                '(height     . 45)
;; 	           '(min-width  . 1)
;;                '(width      . 81)
;;                '(vertical-scroll-bars . nil)
;;                '(internal-border-width . 24)
;;                '(left-fringe    . 1)
;;                '(right-fringe   . 1)
;;                '(tool-bar-lines . 0)
;;                '(menu-bar-lines . 0))))


;; Vertical window divider
;; (setq window-divider-default-right-width 24)
;; (setq window-divider-default-places 'right-only)
;; (window-divider-mode 1)

#+END_SRC

** Which-key

#+BEGIN_SRC elisp

(setq which-key-idle-delay 0.5)

#+END_SRC

** Parens

#+BEGIN_SRC elisp

(use-package! smartparens
  :config
  (setq sp-autoskip-closing-pair nil) ; does not work :-(
  )


(add-hook 'smartparens-enabled-hook #'smartparens-strict-mode)
(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
(add-hook 'smartparens-enabled-hook #'evil-cleverparens-mode)

(map! :map global-map
      :mode evil-cleverparens-mode
      :n "M-l" #'evil-cp->)
(map! :map global-map
      :mode evil-cleverparens-mode
      :n "M-h" #'evil-cp-<)

#+END_SRC

#+RESULTS:

** Keyboard Bindings

*** ESC cancels all

#+begin_src elisp

(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

*** SPC SPC lists commands

#+begin_src elisp

(map! :leader
      :desc "List commands"
      "SPC"  #'execute-extended-command)

#+end_src

*** Navigation

#+BEGIN_SRC elisp

(map! :map global-map
      :n "C-h" #'evil-prev-buffer
      :n "C-l" #'evil-next-buffer
      :n "C-j" #'evil-jump-forward
      :n "C-k" #'evil-jump-backward
      :n "ö" #'evil-avy-goto-char-timer
      )

#+END_SRC

*** Comments

#+begin_src elisp

(map! :map global-map
      :nv ";" #'evilnc-comment-or-uncomment-lines)

#+end_src

*** Files

#+begin_src elisp

(map! :leader
      (:prefix-map ("f" . "file")
       :desc "Save some..." "S" #'save-some-buffers
      ))

#+end_src


** Windows

I find it rather handy to be asked which buffer I want to see after
splitting the window.

#+begin_src elisp

(setq evil-vsplit-window-right t
      evil-split-window-below t)

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))

#+end_src

* Evil
** easy-motion

#+begin_src elisp

(use-package! evil-easymotion
  )

#+end_src
* Projectile

#+begin_src elisp

(setq projectile-project-root-files-functions '(projectile-root-local
                                                projectile-root-top-down
                                                projectile-root-top-down-recurring
                                                projectile-root-bottom-up))
;; (setq projectile-project-root-files-functions '(projectile-root-local
;;                                                 projectile-root-top-down
;;                                                 projectile-root-top-down-recurring
;;                                                 projectile-root-bottom-up))

#+end_src

* Git (MaGit)

#+begin_src elisp

(print "[config.org] Git")

(map! :localleader
      :mode git-commit-mode
      :n :desc "Commit" "," #'with-editor-finish
      :n :desc "Quit commit" "q" #'with-editor-cancel)

(map! :leader
      (:prefix-map ("g" . "git")
       :desc "Magit status" "s" #'magit-status
       :desc "Magit status here" "S"   #'magit-status-here
       :desc "Git stage hunk" "g"   #'git-gutter:stage-hunk
       :desc "Git stage file" "G"   #'magit-stage-file
      ))
#+end_src

* Org

#+BEGIN_SRC elisp

(setq org-directory "~/org/")

(map! :after org
      :map org-mode-map
      :localleader
      "e" nil
      (:prefix-map ("e" . "edit / eval / export")
       "e" #'eval-last-sexp
       "E" #'org-export-dispatch
       "s" #'org-edit-special
       ))

;; none of these works :-(
(map! :after org
      :map org-src-mode-map
      :localleader
      "," #'org-edit-src-exit)
;; (define-key org-src-mode-map (kbd ", ,") #'org-edit-src-exit)
#+END_SRC

* LSP

- https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/

#+BEGIN_SRC elisp

(print "[config.org] LSP")

(use-package! lsp-ui
  :config

  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\firebase\\'")

  (setq
   lsp-ui-imenu-enable t

   lsp-ui-doc-enable nil
   lsp-ui-doc-show-with-cursor t
   lsp-ui-doc-include-signature t
   lsp-ui-doc-position 'bottom
   ;; lsp-ui-doc-delay 3

   lsp-ui-sideline-enable nil
   lsp-ui-sideline-show-code-actions nil

   lsp-lens-enable t

   lsp-enable-symbol-highlighting t
   lsp-enable-on-type-formatting t
   lsp-enable-indentation t
   lsp-enable-snippet t

   lsp-modeline-diagnostics-enable t
   lsp-file-watch-threshold 10000
   lsp-log-io nil
   )

  (map! :localleader
        :mode lsp-mode
        :n "=" #'lsp-format-buffer)
  )

#+END_SRC

* LISP

#+BEGIN_SRC elisp

(after! lisp-mode
  (modify-syntax-entry ?- "w" lisp-mode-syntax-table))

(map! :localleader
      :map (lisp-mode-map)
      ",a"  #'evil-cp-insert-at-end-of-form
      ",i" 'evil-cp-insert-at-beginning-of-form
      "(" #'sp-wrap-round
      )

#+END_SRC

* Clojure

#+BEGIN_SRC elisp

(print "[config.org] Clojure")

(use-package! clojure-mode
  :config
  (setq
   clojure-ident-style 'align-arguments
   clojure-align-forms-automatically 't
   )
  (modify-syntax-entry ?- "w" clojure-mode-syntax-table)
  )

;; (after! clojure-mode ; in this case the major mode and package named the same thing
;;   (set-ligatures! 'clojure-mode))

(use-package! cider
  :config
  (setq
   cider-font-lock-reader-conditionals nil)
  (map! :localleader
        :map (clojure-mode-map clojurescript-mode-map)
        "ev" #'cider-eval-sexp-at-point
        ",a" 'evil-cp-insert-at-end-of-form
        ",i" 'evil-cp-insert-at-beginning-of-form
        "(" 'sp-wrap-round
        "[" 'sp-wrap-square
        ;; "==" 'lsp-format-buffer
        ))

#+END_SRC
